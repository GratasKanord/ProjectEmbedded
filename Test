#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <SPI.h>

#define SEALEVELPRESSURE_HPA (1013.25)

// Light Sensor
int color = 0;
const int sensorPin = 26;

// Motor
int motor1Pin1 = 27;
int motor1Pin2 = 25;
int enable1Pin = 14;
bool buttonstate = 0;
const int freq = 30000;
const int pwmChannel = 0;
const int resolution = 8;
int dutyCycle = 200;

// State Machine - LED
const int LED_START = 2;
const int LED_RIGHT = 5;
const int LED_LEFT = 15;
int state = 0;

// State Machine - Buttons
const int BUTTTON_RIGHT_PIN = 19;
const int BUTTTON_LEFT_PIN = 18;
unsigned long button_time = 0;
unsigned long last_button_time = 0;
const int timeBetweenPush = 500;

struct Button {
  const uint8_t PIN;
  bool pressed;
};

Button buttonRight = { BUTTTON_RIGHT_PIN, false };
Button buttonLeft = { BUTTTON_LEFT_PIN, false };

// Right Button processing
void IRAM_ATTR isrRight() {
  button_time = millis();
  if (button_time - last_button_time > timeBetweenPush) {
    buttonRight.pressed = true;

    if (state == 2) {
      state = 0;
    } else {
      state++;
    }

    manageLights();
    last_button_time = button_time;
  }
}

// Left Button processing
void IRAM_ATTR isrLeft() {
  button_time = millis();
  if (button_time - last_button_time > timeBetweenPush) {
    buttonLeft.pressed = true;
    if (state == 2) {
      state = 0;
    } else {
      state++;
    }

    manageLights();
    last_button_time = button_time;
  }
}

void setup() {
  Serial.begin(115200);
  // Initializing State Mchine
  pinMode(LED_START, OUTPUT);
  pinMode(LED_RIGHT, OUTPUT);
  pinMode(LED_LEFT, OUTPUT);
  attachInterrupt(buttonRight.PIN, isrRight, FALLING);
  attachInterrupt(buttonLeft.PIN, isrLeft, FALLING);

  // Sensor and motor
  pinMode(sensorPin, INPUT);
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);
  ledcSetup(pwmChannel, freq, resolution);
  ledcAttachPin(enable1Pin, pwmChannel);
}

// State Machine processing
void manageLights() {
  switch (state) {
    case 0:
      digitalWrite(LED_START, LOW);
      digitalWrite(LED_RIGHT, LOW);
      digitalWrite(LED_LEFT, LOW);
      break;

    case 1:
      digitalWrite(LED_START, HIGH);
      break;

    case 2:
      digitalWrite(LED_START, LOW);
      if (buttonRight.pressed) {
        digitalWrite(LED_RIGHT, HIGH);
      }

      if (buttonLeft.pressed) {
        digitalWrite(LED_LEFT, HIGH);
      }
      break;
  }

  buttonLeft.pressed = false;
  buttonRight.pressed = false;
}

void loop() {
  // Sensor and motor processing
  color = analogRead(sensorPin);
  Serial.println(color);

  if (color > 3500) {
    Serial.println("Moving Forward");
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    delay(1200);
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, LOW);
    delay(3000);

    Serial.println("Moving Backwards");
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    delay(800);
    ledcWrite(pwmChannel, dutyCycle);
    dutyCycle = 200;
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, LOW);
  }
}
